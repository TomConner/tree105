#!/usr/bin/env python

import os
import requests
import json
import click
from pprint import pprint
from datetime import datetime
from pathlib import Path


STAMP: datetime = datetime.utcnow()

@click.group()
def cli():
    pass

def to_int(s:str):
    if s is None:
        return 0
    if s == "":
        return 0
    return int(s)

def order_amount(order):
    return (to_int(order['numtrees']) * 15 + to_int(order['extra']))

class EmailLog:
    def __init__(self, email_log: Path):
        self.email_log = email_log
        if self.email_log.exists():
            with open(self.email_log) as f:
                self.events = json.load(f)
        else:
            self.events = []

    def event(self, email, batch, sendgrid_payload):
        #print(f"Logging {email} sent on batch {batch}")
        self.events.append({
            "stamp": str(STAMP),
            "email": email,
            "batch": batch,
            "payload": sendgrid_payload
        })
        self.flush()

    def has_event(self, email, batch):
        return any([
            event['email'] == email and event['batch'] == batch
            for event in self.events
        ])

    def flush(self):
        with open(self.email_log, 'w') as f:
            json.dump(self.events, f)

@click.command()
@click.argument('batch', type=click.Choice(['registered', 'paid', 'payment-reminder', 'pickup-reminder', 'pickup']))
@click.option('--dry-run', is_flag=True, help="Don't actually send emails")
def sendem(batch: str, dry_run: bool = False):
    with open(f"/home/tom/tree105/work/regs.json") as f:
        emails = json.load(f)

    email_log = EmailLog(Path("/home/tom/tree105/work/email-log.json"))
    for email in emails:
        order = email
        order['amount'] = f"{order_amount(order)}"

        if email_log.has_event(order['email'], batch):
            if dry_run:
                print(f"dry_run: skipping because sent previously on {batch}: {order}")
            continue

        sendgrid_payload = {
            "from": {"email": "troop@troop105.net", "name": "BSA Troop 105 Pembroke"},
            "personalizations":[{
                "to": [
                    {"email": order['email'], "name": order['name']}
                ],
                "cc": [
                    {"email": "treedrive105@gmail.com", "name": "BSA Troop 105 Tree Drive"}
                ],
                "dynamic_template_data": order,
            }],
            "template_id" : "d-692bae398b0f4902b168f9266f8dcddc"
        }

        if dry_run:
            pprint(sendgrid_payload)
            print(f"dry_run: sending {order}")
        else:
            print(f"sending {order}")
            response = requests.post(
                "https://api.sendgrid.com/v3/mail/send",
                headers={"Authorization": f"Bearer {os.environ.get('SENDGRID_API_KEY')}"},
                json=sendgrid_payload
            )
            if (response.status_code >= 200 and response.status_code <= 299 ):
                email_log.event(order['email'], batch, sendgrid_payload)


if __name__ == '__main__':
    cli.add_command(sendem)
    cli()
