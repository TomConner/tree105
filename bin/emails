#!/usr/bin/env python

import os
import requests
import json
import click
from pprint import pprint

@click.group()
def cli():
    pass

def to_int(s:str):
    if s is None:
        return 0
    if s == "":
        return 0
    return int(s)

def order_amount(order):
    print(f"order_amount: {order}")
    return (to_int(order['numtrees']) * 15 + to_int(order['extra']))

def email_log(email, batch):
    print(f"Logging {order['email']} sent on batch {batch}")


@click.command()
@click.argument('batch', type=click.Choice(['registered', 'paid', 'payment-reminder', 'pickup-reminder', 'pickup']))
@click.option('--dry-run', is_flag=True, help="Don't actually send emails")
def sendem(batch: str, dry_run: bool = False):
    with open(f"/home/tom/tree105/work/regs.json") as f:
        emails = json.load(f)

    for email in emails:
        order = email
        order['amount'] = f"{order_amount(order)}"

        if batch == 'registered':
            pass
        else:
            continue

        email_log(order['email'], batch)

        sendgrid_payload = {
            "personalizations":[{
                "to": [
                    {"email": order['email'], "name": order['name']}
                ],
                "cc": [
                    {"email": "treedrive105@gmail.com", "name": "BSA Troop 105 Tree Drive"}
                ],
                "dynamic_template_data": order,
            }],
            "from": {"email": "troop@troop105.net", "name": "BSA Troop 105 Pembroke"},
            "template_id" : "d-692bae398b0f4902b168f9266f8dcddc"
        }

        if dry_run:
            pprint(sendgrid_payload)

        print(f"Sending email to {order['email']}...")

        if not dry_run:
            response = requests.post(
                "https://api.sendgrid.com/v3/mail/send",
                headers={"Authorization": f"Bearer {os.environ.get('SENDGRID_API_KEY')}"},
                json=sendgrid_payload
            )

            pprint(response.status_code)
            pprint(response.headers)
            pprint(response.text)


if __name__ == '__main__':
    cli.add_command(sendem)
    cli()
